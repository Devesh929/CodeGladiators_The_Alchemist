<Activity mc:Ignorable="sap sap2010 sads" x:Class="TestFramework" mva:VisualBasic.Settings="{x:Null}" sap2010:WorkflowViewState.IdRef="TestFramework_1"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation"
 xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:sd="clr-namespace:System.Diagnostics;assembly=System"
 xmlns:ui="http://schemas.uipath.com/workflow/activities"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>CustomActivities.VariableComparer</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.VisualStudio.Services.Common</AssemblyReference>
      <AssemblyReference>CustomActivities.VariableComparer</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <StateMachine DisplayName="Run All Unit Tests" sap2010:WorkflowViewState.IdRef="StateMachine_1">
    <StateMachine.InitialState>
      <State x:Name="__ReferenceID2" sap2010:Annotation.AnnotationText="Perform initialization. Create a log file (if not present), adapt framework to the environment, and grab all tests from repository." DisplayName="Initialization" sap2010:WorkflowViewState.IdRef="State_1">
        <State.Entry>
          <TryCatch sap2010:WorkflowViewState.IdRef="TryCatch_1">
            <TryCatch.Try>
              <Sequence DisplayName="Initialize Framework" sap2010:WorkflowViewState.IdRef="Sequence_1">
                <Sequence DisplayName="Set Default Values" sap2010:WorkflowViewState.IdRef="Sequence_14">
                  <Assign DisplayName="Set BusinessException to Nothing" sap2010:WorkflowViewState.IdRef="Assign_28">
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:Exception">[BusinessException]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:Exception">[Nothing]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Set SystemError to Nothing" sap2010:WorkflowViewState.IdRef="Assign_1">
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:Exception">[SystemError]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:Exception">[Nothing]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
                <Sequence sap2010:Annotation.AnnotationText="This part of the code is responsible to adapt framework to work both as a standalone project and to have parent-child relationship with the parent project that it is being integrated to (by removing project.json from the framework root directory).&#xA;&#xA;Basically it is responsible for the robustness of the framework (framework folder can be renamed, placed inside parent project root folder or any of the sub-folders and it will not break even when project.json is removed from its root folder)" DisplayName="Adapt Framework to Environment" sap2010:WorkflowViewState.IdRef="Sequence_11">
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:String" Name="currentDirectory" />
                    <Variable x:TypeArguments="x:String" Name="baseFolder" />
                    <Variable x:TypeArguments="s:String[]" Name="subDirectories" />
                    <Variable x:TypeArguments="x:String" Name="frameworkBaseFolder" />
                    <Variable x:TypeArguments="x:String" Name="frameworkBaseDirectoryPath" />
                  </Sequence.Variables>
                  <Assign DisplayName="Get Current Directory" sap2010:WorkflowViewState.IdRef="Assign_14">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[currentDirectory]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[Environment.currentDirectory]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Get Base Folder Name" sap2010:WorkflowViewState.IdRef="Assign_15">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[baseFolder]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[currentDirectory.Split(new String() {"\"}, StringSplitOptions.None)(currentDirectory.Split(new String() {"\"}, StringSplitOptions.None).Length-1)]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Get All Directories in a Main Project" sap2010:WorkflowViewState.IdRef="Assign_17">
                    <Assign.To>
                      <OutArgument x:TypeArguments="s:String[]">[subDirectories]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="s:String[]">[Directory.GetDirectories(Environment.CurrentDirectory,"*.*",SearchOption.AllDirectories)]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign DisplayName="Find Base Directory Path" sap2010:WorkflowViewState.IdRef="Assign_21">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[frameworkBaseDirectoryPath]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[subDirectories.Where(Function(x) Directory.GetFiles(x).Any(Function(y) y.ToLower.Contains("runalltests.xaml"))).FirstOrDefault]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <If Condition="[String.IsNullOrWhiteSpace(frameworkBaseDirectoryPath)]" DisplayName="Framework Inegrated Into Another Project?" sap2010:WorkflowViewState.IdRef="If_4">
                    <If.Then>
                      <Assign DisplayName="Framework Standalone - Folder Name" sap2010:WorkflowViewState.IdRef="Assign_22">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[frameworkBaseFolder]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">[baseFolder]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Then>
                    <If.Else>
                      <Assign DisplayName="Framework Integrated - Folder Name" sap2010:WorkflowViewState.IdRef="Assign_23">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[frameworkBaseFolder]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">[frameworkBaseDirectoryPath.Split(new String() {"\"}, StringSplitOptions.None)(frameworkBaseDirectoryPath.Split(new String() {"\"}, StringSplitOptions.None).Length-1)]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Else>
                  </If>
                  <If sap2010:Annotation.AnnotationText="Check to see if prefix for invokes is needed.&#xA;&#xA;This depends if Test_Framework is used as a standalone project or is integrated into other project (meaning project.json file doesn't exist in the framework directory)." Condition="[baseFolder.Equals(frameworkBaseFolder)]" DisplayName="Add InvokePrefix?" sap2010:WorkflowViewState.IdRef="If_3">
                    <If.Then>
                      <Assign DisplayName="Set InvokePrefix to be empty" sap2010:WorkflowViewState.IdRef="Assign_16">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[InvokePrefix]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">
                            <Literal x:TypeArguments="x:String" Value="" />
                          </InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Then>
                    <If.Else>
                      <Assign DisplayName="Set InvokePrefix as a relative path pointing from a parent project folder" sap2010:WorkflowViewState.IdRef="Assign_26">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[InvokePrefix]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">[frameworkBaseDirectoryPath.Substring(frameworkBaseDirectoryPath.IndexOf(baseFolder)+baseFolder.Length+1)+"\"]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Else>
                  </If>
                  <Assign DisplayName="Set TestLog location" sap2010:WorkflowViewState.IdRef="Assign_30">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[TestLogFile]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[InvokePrefix+"Logs\"+TestLogFile]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke CreateLogFile workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Framework\CreateLogFile.xaml&quot;]">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="in_TestLogFile">[TestLogFile]</InArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke LogsFolderCleanup workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_15" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Framework\LogsFolderCleanup.xaml&quot;]">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="in_InvokePrefix">[InvokePrefix]</InArgument>
                    <InArgument x:TypeArguments="x:Int32" x:Key="in_MaxTestLogsToKeep">[MaxTestLogsToKeep]</InArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke CloseNotepad workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_14" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Framework\CloseNotepad.xaml&quot;]">
                  <ui:InvokeWorkflowFile.Arguments>
                    <scg:Dictionary x:TypeArguments="x:String, Argument" />
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke GetTestFiles workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Framework\GetTestFiles.xaml&quot;]">
                  <ui:InvokeWorkflowFile.Arguments>
                    <OutArgument x:TypeArguments="s:String[]" x:Key="out_Files">[TestFiles]</OutArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_InvokePrefix">[InvokePrefix]</InArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke ValidateTestCount workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_10" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Framework\ValidateTestCount.xaml&quot;]">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="s:String[]" x:Key="in_TestFiles">[TestFiles]</InArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke GetLongestTestFileNameLength workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_13" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Framework\GetLongestTestFileNameLength.xaml&quot;]">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="s:String[]" x:Key="in_TestFiles">[TestFiles]</InArgument>
                    <OutArgument x:TypeArguments="x:Int32" x:Key="out_LongestNameLength">[LongestFileNameLength]</OutArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke AppendTextStart workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_3" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Framework\AppendTextStart.xaml&quot;]">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="s:String[]" x:Key="in_Files">[TestFiles]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="in_TestLogFile">[TestLogFile]</InArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
              </Sequence>
            </TryCatch.Try>
            <TryCatch.Catches>
              <Catch x:TypeArguments="ui:BusinessRuleException" sap2010:WorkflowViewState.IdRef="Catch`1_4">
                <ActivityAction x:TypeArguments="ui:BusinessRuleException">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="ui:BusinessRuleException" Name="exception" />
                  </ActivityAction.Argument>
                  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_13">
                    <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_15" Level="Error" Message="[&quot;Unable to proceed with the execution. No tests found in the tests repository.&quot;+VbCrLf+&quot;Please place test(s) in the '&quot;+InvokePrefix+&quot;Tests_Repository&quot;+&quot;' folder and try again.&quot;]" />
                    <ui:MessageBox ChosenButton="{x:Null}" Buttons="Ok" Caption="Unit Test(s) Not Found" DisplayName="Message box" sap2010:WorkflowViewState.IdRef="MessageBox_1" Text="[&quot;Unable to proceed with the execution. No test files found in tests repository.&quot;+VbCrLf+VbCrLf+&quot;Please place test(s) in the '&quot;+InvokePrefix+&quot;Tests_Repository&quot;+&quot;' folder and try again.&quot;]" TopMost="True" />
                    <Assign DisplayName="Set BusinessException" sap2010:WorkflowViewState.IdRef="Assign_29">
                      <Assign.To>
                        <OutArgument x:TypeArguments="s:Exception">[BusinessException]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="s:Exception">[exception]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                </ActivityAction>
              </Catch>
              <Catch x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="Catch`1_5">
                <ActivityAction x:TypeArguments="s:Exception">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="Sequence" sap2010:WorkflowViewState.IdRef="Sequence_12">
                    <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_14" Level="Fatal" Message="[&quot;System error at initialization: &quot; +  exception.GetType.ToString + &quot; with message: &quot; + exception.Message + &quot; at Source: &quot; + exception.Source]" />
                    <Assign DisplayName="Set SystemError" sap2010:WorkflowViewState.IdRef="Assign_27">
                      <Assign.To>
                        <OutArgument x:TypeArguments="s:Exception">[SystemError]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="s:Exception">[exception]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </Sequence>
                </ActivityAction>
              </Catch>
            </TryCatch.Catches>
          </TryCatch>
        </State.Entry>
        <State.Transitions>
          <Transition DisplayName="Error" sap2010:WorkflowViewState.IdRef="Transition_5" Condition="[SystemError isNot Nothing or BusinessException isNot Nothing]">
            <Transition.To>
              <State x:Name="__ReferenceID1" sap2010:Annotation.AnnotationText="Execution stops." DisplayName="End" sap2010:WorkflowViewState.IdRef="State_11" IsFinal="True" />
            </Transition.To>
          </Transition>
          <Transition DisplayName="Success" sap2010:WorkflowViewState.IdRef="Transition_3">
            <Transition.To>
              <State x:Name="__ReferenceID0" sap2010:Annotation.AnnotationText="Grab test file path." DisplayName="Get Next Test" sap2010:WorkflowViewState.IdRef="State_8">
                <State.Entry>
                  <Sequence DisplayName="Get Test" sap2010:WorkflowViewState.IdRef="Sequence_3">
                    <If Condition="[TestCounter &lt; TestFiles.Length]" DisplayName="Get Next Test?" sap2010:WorkflowViewState.IdRef="If_1">
                      <If.Then>
                        <Assign sap2010:WorkflowViewState.IdRef="Assign_3">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[File]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[TestFiles(TestCounter)]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </If.Then>
                      <If.Else>
                        <Sequence sap2010:WorkflowViewState.IdRef="Sequence_6">
                          <Assign DisplayName="Set File to Nothing" sap2010:WorkflowViewState.IdRef="Assign_4">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:String">[File]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:String">[Nothing]</InArgument>
                            </Assign.Value>
                          </Assign>
                          <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke AppendTextEnd workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_8" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Framework\AppendTextEnd.xaml&quot;]">
                            <ui:InvokeWorkflowFile.Arguments>
                              <InArgument x:TypeArguments="x:Int32" x:Key="in_PassedTestsCounter">[PassedTestsCounter]</InArgument>
                              <InArgument x:TypeArguments="s:String[]" x:Key="in_Files">[TestFiles]</InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="in_TestLogFile">[TestLogFile]</InArgument>
                              <InArgument x:TypeArguments="sd:Stopwatch" x:Key="in_TestsRunTime">[TestsRunTimeStopwatch]</InArgument>
                            </ui:InvokeWorkflowFile.Arguments>
                          </ui:InvokeWorkflowFile>
                          <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke OpenLogFile workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_9" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Framework\OpenLogFile.xaml&quot;]">
                            <ui:InvokeWorkflowFile.Arguments>
                              <InArgument x:TypeArguments="x:String" x:Key="in_TestLogFile">[TestLogFile]</InArgument>
                            </ui:InvokeWorkflowFile.Arguments>
                          </ui:InvokeWorkflowFile>
                        </Sequence>
                      </If.Else>
                    </If>
                  </Sequence>
                </State.Entry>
                <State.Transitions>
                  <Transition DisplayName="Success" sap2010:WorkflowViewState.IdRef="Transition_6" Condition="[File IsNot Nothing]">
                    <Transition.To>
                      <State x:Name="__ReferenceID3" sap2010:Annotation.AnnotationText="Run test and append result to log file." DisplayName="Run Test" sap2010:WorkflowViewState.IdRef="State_9">
                        <State.Entry>
                          <TryCatch sap2010:WorkflowViewState.IdRef="TryCatch_2">
                            <TryCatch.Try>
                              <Sequence DisplayName="Run Test and Append Result" sap2010:WorkflowViewState.IdRef="Sequence_4">
                                <Sequence.Variables>
                                  <Variable x:TypeArguments="x:Boolean" Name="isTestValid" />
                                  <Variable x:TypeArguments="sd:Stopwatch" Name="stopwatch" />
                                </Sequence.Variables>
                                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke ValidateTestFile workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_11" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Framework\ValidateTestFile.xaml&quot;]">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="in_testPath">[File]</InArgument>
                                    <OutArgument x:TypeArguments="x:Boolean" x:Key="out_IsValidated">[isTestValid]</OutArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                </ui:InvokeWorkflowFile>
                                <Assign DisplayName="Start stopwatch" sap2010:WorkflowViewState.IdRef="Assign_33">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="sd:Stopwatch">[stopwatch]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="sd:Stopwatch">[Stopwatch.StartNew()]</InArgument>
                                  </Assign.Value>
                                </Assign>
                                <If Condition="[isTestValid]" DisplayName="Is Test Valid?" sap2010:WorkflowViewState.IdRef="If_5">
                                  <If.Then>
                                    <Sequence DisplayName="Valid Test" sap2010:WorkflowViewState.IdRef="Sequence_15">
                                      <Sequence.Variables>
                                        <Variable x:TypeArguments="x:Boolean" Name="testResult" />
                                        <Variable x:TypeArguments="x:String" Name="message" />
                                      </Sequence.Variables>
                                      <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke RunTest workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Framework\RunTest.xaml&quot;]">
                                        <ui:InvokeWorkflowFile.Arguments>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_File">[File]</InArgument>
                                          <OutArgument x:TypeArguments="x:Boolean" x:Key="out_Result">[testResult]</OutArgument>
                                          <OutArgument x:TypeArguments="x:String" x:Key="out_Message">[message]</OutArgument>
                                        </ui:InvokeWorkflowFile.Arguments>
                                      </ui:InvokeWorkflowFile>
                                      <InvokeMethod DisplayName="stopwatch.Stop()" sap2010:WorkflowViewState.IdRef="InvokeMethod_1" MethodName="Stop">
                                        <InvokeMethod.TargetObject>
                                          <InArgument x:TypeArguments="sd:Stopwatch">[stopwatch]</InArgument>
                                        </InvokeMethod.TargetObject>
                                      </InvokeMethod>
                                      <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke AppendTestResult workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_5" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Framework\AppendTestResult.xaml&quot;]">
                                        <ui:InvokeWorkflowFile.Arguments>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_TestLogFile">[TestLogFile]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_File">[File]</InArgument>
                                          <InArgument x:TypeArguments="x:Boolean" x:Key="in_Result">[testResult]</InArgument>
                                          <InOutArgument x:TypeArguments="x:Int32" x:Key="io_PassedTestsCounter">[PassedTestsCounter]</InOutArgument>
                                          <InOutArgument x:TypeArguments="x:Int32" x:Key="io_TestCounter">[TestCounter]</InOutArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_InvokePrefix">[InvokePrefix]</InArgument>
                                          <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsTestValid">[isTestValid]</InArgument>
                                          <InArgument x:TypeArguments="x:Int32" x:Key="in_FileNameLength">[LongestFileNameLength]</InArgument>
                                          <InArgument x:TypeArguments="sd:Stopwatch" x:Key="in_Stopwatch">[stopwatch]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_Message">[message]</InArgument>
                                        </ui:InvokeWorkflowFile.Arguments>
                                      </ui:InvokeWorkflowFile>
                                    </Sequence>
                                  </If.Then>
                                  <If.Else>
                                    <Sequence DisplayName="Invalid Test" sap2010:WorkflowViewState.IdRef="Sequence_16">
                                      <InvokeMethod DisplayName="stopwatch.Stop()" sap2010:WorkflowViewState.IdRef="InvokeMethod_2" MethodName="Stop">
                                        <InvokeMethod.TargetObject>
                                          <InArgument x:TypeArguments="sd:Stopwatch">[stopwatch]</InArgument>
                                        </InvokeMethod.TargetObject>
                                      </InvokeMethod>
                                      <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke AppendTestResult workflow" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_12" UnSafe="False" WorkflowFileName="[InvokePrefix+&quot;Framework\AppendTestResult.xaml&quot;]">
                                        <ui:InvokeWorkflowFile.Arguments>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_TestLogFile">[TestLogFile]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_File">[File]</InArgument>
                                          <InArgument x:TypeArguments="x:Boolean" x:Key="in_Result" />
                                          <InOutArgument x:TypeArguments="x:Int32" x:Key="io_PassedTestsCounter">[PassedTestsCounter]</InOutArgument>
                                          <InOutArgument x:TypeArguments="x:Int32" x:Key="io_TestCounter">[TestCounter]</InOutArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_InvokePrefix">[InvokePrefix]</InArgument>
                                          <InArgument x:TypeArguments="x:Boolean" x:Key="in_IsTestValid">[isTestValid]</InArgument>
                                          <InArgument x:TypeArguments="x:Int32" x:Key="in_FileNameLength">[LongestFileNameLength]</InArgument>
                                          <InArgument x:TypeArguments="sd:Stopwatch" x:Key="in_Stopwatch">[stopwatch]</InArgument>
                                          <InArgument x:TypeArguments="x:String" x:Key="in_Message" />
                                        </ui:InvokeWorkflowFile.Arguments>
                                      </ui:InvokeWorkflowFile>
                                    </Sequence>
                                  </If.Else>
                                </If>
                              </Sequence>
                            </TryCatch.Try>
                            <TryCatch.Catches>
                              <Catch x:TypeArguments="s:Exception" sap2010:WorkflowViewState.IdRef="Catch`1_3">
                                <ActivityAction x:TypeArguments="s:Exception">
                                  <ActivityAction.Argument>
                                    <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                  </ActivityAction.Argument>
                                  <Assign sap2010:WorkflowViewState.IdRef="Assign_7">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="s:Exception">[SystemError]</OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="s:Exception">[exception]</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                </ActivityAction>
                              </Catch>
                            </TryCatch.Catches>
                          </TryCatch>
                        </State.Entry>
                        <State.Transitions>
                          <Transition DisplayName="Test Completed" sap2010:WorkflowViewState.IdRef="Transition_8" To="{x:Reference __ReferenceID0}" Condition="[SystemError Is Nothing]" />
                          <Transition DisplayName="System Error" sap2010:WorkflowViewState.IdRef="Transition_9" To="{x:Reference __ReferenceID1}">
                            <Transition.Action>
                              <ui:LogMessage DisplayName="Log Message" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Fatal" Message="[&quot;Test execution finished due to an error: &quot; + SystemError.GetType.ToString+&quot; -&gt; Source: &quot;+SystemError.Source+&quot; -&gt; Details: &quot;+SystemError.Message]" />
                            </Transition.Action>
                            <Transition.Condition>[SystemError IsNot Nothing]</Transition.Condition>
                          </Transition>
                        </State.Transitions>
                      </State>
                    </Transition.To>
                  </Transition>
                  <Transition DisplayName="No Data" sap2010:WorkflowViewState.IdRef="Transition_7" To="{x:Reference __ReferenceID1}" Condition="[File Is Nothing]" />
                </State.Transitions>
              </State>
            </Transition.To>
            <Transition.Action>
              <Assign DisplayName="Stopwatch Run" sap2010:WorkflowViewState.IdRef="Assign_34">
                <Assign.To>
                  <OutArgument x:TypeArguments="sd:Stopwatch">[TestsRunTimeStopwatch]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="sd:Stopwatch">[Stopwatch.StartNew()]</InArgument>
                </Assign.Value>
              </Assign>
            </Transition.Action>
            <Transition.Condition>[SystemError Is Nothing]</Transition.Condition>
          </Transition>
        </State.Transitions>
      </State>
    </StateMachine.InitialState>
    <x:Reference>__ReferenceID2</x:Reference>
    <x:Reference>__ReferenceID0</x:Reference>
    <x:Reference>__ReferenceID3</x:Reference>
    <x:Reference>__ReferenceID1</x:Reference>
    <StateMachine.Variables>
      <Variable x:TypeArguments="x:String" Default="[&quot;TestLog_&quot;+Today.ToString(&quot;yyyy-MM-dd&quot;)+&quot;.txt&quot;]" Name="TestLogFile" />
      <Variable x:TypeArguments="s:Exception" Name="SystemError" />
      <Variable x:TypeArguments="s:String[]" Name="TestFiles" />
      <Variable x:TypeArguments="x:String" Name="File" />
      <Variable x:TypeArguments="x:Int32" Default="0" Name="TestCounter" />
      <Variable x:TypeArguments="x:Int32" Default="0" Name="PassedTestsCounter" />
      <Variable x:TypeArguments="sd:Stopwatch" Name="TestsRunTimeStopwatch" />
      <Variable x:TypeArguments="x:String" Name="InvokePrefix" />
      <Variable x:TypeArguments="s:Exception" Name="BusinessException" />
      <Variable x:TypeArguments="x:Int32" Name="LongestFileNameLength" />
      <Variable x:TypeArguments="x:Int32" Default="10" Name="MaxTestLogsToKeep" />
    </StateMachine.Variables>
    <sads:DebugSymbol.Symbol>d11DOlxVc2Vyc1x0Zm1cRG9jdW1lbnRzXDAxX1Byb2plY3RzXDAxX1JQQVwwMV9VaVBhdGhcdWlwYXRoLXRlc3RpbmdfZnJhbWV3b3JrXFJ1bkFsbFRlc3RzLnhhbWymAUAD1wMSAgEBygM0ygOEAQMBkgLOAzPOAzYDAZECzwMzzwM2AwGQAtQDM9QDNwMBjwJCB8MDDwMBhwGSAg+0AxcCAWC/AhevAx8CAQSNAg+NArEBAgECRAuIAhYDAZMBiwJkiwKkAQMBjwHAAyPAAzsDAY0BtwMPvgMYAwGJAZQCE7oCHgIBZ70Cbr0ChAECAWSyA5ABsgOjAQIBYsECG6QDJgIBEKcDnwGnA7kBAgENrAMzrANOAgELqgMfqgPIAgIBBkYP3wEaAwGpAecBE/IBHgMBnwH6AROEAh4DAZQBvAM+vANUAwGMAbkDP7kDVgMBigGVAhW5AhoCAWjDAh+RAyoCARaZAyOgAywCARGqA40BqgPFAgIBB0cRWBwDAYYCWRG3ARwDAdMBuAERvAEpAwHOAb0BEcIBKQMBxwHDARHHASkDAcQByAERzQEpAwG9Ac4BEdIBKQMBuAHTARHYASkDAbEB2QER3gEpAwGqAegBFegB4wIDAacB6QEV6QGuAwMBpAHqARXxAR4DAaAB+wEV+wG1AgMBmgH8ARWDAh4DAZUBlQIjlQJIAgFplwIZngIiAwGBAaECGbcCJAIBbMgCIc0COQIBWc4CIdUCKgIBVdYCIZADJgIBF54DUZ4DXAIBFJsDUpsDXwIBEkgTTxwDAYsCUBNXHAMBhwJhE2gcAwGCAmkTcBwDAf4BcRN4HAMB+gF5E4ABHAMB9gGBAROWARgDAeoBlwETrgEYAwHaAa8BE7YBHAMB1AG6AVO6AWADAdEBuAHGAbgB/wEDAc8BwAFYwAFrAwHMAb8BVL8BYgMBygG9AcsBvQGIAgMByAHDAcYBwwH+AQMBxQHLAVTLAWIDAcIByAHFAcgB/QEDAcABygFRygFcAwG+AdABU9ABXgMBuwHOAcsBzgGIAgMBuQHWAVrWAXEDAbYB1QFT1QFeAwG0AdMB1gHTAZ4CAwGyAdsBT9sBWgMBrwHcAVPcAWADAa0B2QHIAdkBgwIDAasB6AGEAegB4AIDAagB6QFR6QFpAwGmAekBuAHpAZwDAwGlAe8BQ+8BTgMBowHsAUTsAVcDAaEB+wGEAfsBsgIDAZsBgQJDgQJOAwGYAf4BRP4BUQMBlgGcAkScAlwDAYQBmQJFmQJLAwGCAaICG6kCJAIBfaoCG7ECMwIBcrICG7YCMwIBbcsCZssCcwIBXsoCYMoCZgIBXMgC2gHIApYCAgFa0wJQ0wJmAgFY0AJR0AJcAgFW1gIv1gI+AgEY2AIl9wIwAgEx+gIljgMwAgEaTUFNSgMBjgJKQkpVAwGMAlVBVUoDAYoCUkJSTwMBiAJmPmZcAwGFAmM/Y1EDAYMCbj5u0QEDAYECaz9rSwMB/wF2QHaaAQMB/QFzQXNRAwH7AX4+fr4BAwH5AXs/e1sDAfcBgQEhgQFaAwHrAYMBF4oBIAMB8QGNAReUASADAe0BlwGlApcBzwIDAdsBmQEXogEgAwHmAaUBF6wBIAMB3gG0AT60AWADAdcBsQE/sQFMAwHVAacCRqcCTwMBgAGkAkekAk0CAX6tAlmtAmQCAXuuAl2uAmoCAXmvAmKvAnkCAXeqAtABqgKJAgIBdawCY6wCdwIBc7QCXbQCagIBcLICzgGyAoUCAgFu3QIn4wI/AgFM5AIn6AI2AgFJ6QIn9gI/AgEy+wIn/wI2AgEugAMnjQM/AgEbiAFCiAFOAwH0AYUBQ4UBWAMB8gGSAUKSAekBAwHwAY8BQ48BWAMB7gGfAR2fAUwDAekBmwFDmwFRAwHnAaoBQqoBsAEDAeEBpwFDpwFRAwHfAd8CYt8CaAIBU+ACZ+ACcwIBUeECZ+ECcAIBT90C1gHdAokCAgFN5gJW5gJhAgFK7AJi7AJoAgFH6wJp6wJ2AgFF7gJy7gKGAQIBQ/QCZfQCbgIBQfECavECdwIBP/ICa/ICggECAT3zAmvzAnYCATvwAmrwAngCATntAmXtAnECATfpAt8B6QKbAgIBNe8Ca+8CeAIBM/0CVv0CYQIBL4MDYoMDaAIBLIIDaYIDdgIBKoUDcoUDhgECASiIA2qIA3cCASaJA2uJA4IBAgEkigNrigN2AgEihwNqhwN4AgEggAPgAYADnAICAR6GA2uGA3gCARw=</sads:DebugSymbol.Symbol>
  </StateMachine>
  <sap2010:WorkflowViewState.ViewStateManager>
    <sap2010:ViewStateManager>
      <sap2010:ViewStateData Id="Assign_28" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_1" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Sequence_14" sap:VirtualizedContainerService.HintSize="314,51">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_14" sap:VirtualizedContainerService.HintSize="509,60" />
      <sap2010:ViewStateData Id="Assign_15" sap:VirtualizedContainerService.HintSize="509,60" />
      <sap2010:ViewStateData Id="Assign_17" sap:VirtualizedContainerService.HintSize="509,60" />
      <sap2010:ViewStateData Id="Assign_21" sap:VirtualizedContainerService.HintSize="509,60" />
      <sap2010:ViewStateData Id="Assign_22" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_23" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_4" sap:VirtualizedContainerService.HintSize="509,208" />
      <sap2010:ViewStateData Id="Assign_16" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="Assign_26" sap:VirtualizedContainerService.HintSize="242,60" />
      <sap2010:ViewStateData Id="If_3" sap:VirtualizedContainerService.HintSize="509,280">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_30" sap:VirtualizedContainerService.HintSize="509,60" />
      <sap2010:ViewStateData Id="Sequence_11" sap:VirtualizedContainerService.HintSize="314,363">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="InvokeWorkflowFile_1" sap:VirtualizedContainerService.HintSize="314,87">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="InvokeWorkflowFile_15" sap:VirtualizedContainerService.HintSize="314,87" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_14" sap:VirtualizedContainerService.HintSize="314,87" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_2" sap:VirtualizedContainerService.HintSize="314,87" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_10" sap:VirtualizedContainerService.HintSize="314,87" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_13" sap:VirtualizedContainerService.HintSize="314,87" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_3" sap:VirtualizedContainerService.HintSize="314,87" />
      <sap2010:ViewStateData Id="Sequence_1" sap:VirtualizedContainerService.HintSize="336,1467">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LogMessage_15" sap:VirtualizedContainerService.HintSize="313.6,92.8" />
      <sap2010:ViewStateData Id="MessageBox_1" sap:VirtualizedContainerService.HintSize="313.6,59.2" />
      <sap2010:ViewStateData Id="Assign_29" sap:VirtualizedContainerService.HintSize="313.6,60.8" />
      <sap2010:ViewStateData Id="Sequence_13" sap:VirtualizedContainerService.HintSize="336,417.6">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Catch`1_4" sap:VirtualizedContainerService.HintSize="403.2,22.4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LogMessage_14" sap:VirtualizedContainerService.HintSize="313.6,92.8" />
      <sap2010:ViewStateData Id="Assign_27" sap:VirtualizedContainerService.HintSize="313.6,60.8" />
      <sap2010:ViewStateData Id="Sequence_12" sap:VirtualizedContainerService.HintSize="336,318.4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Catch`1_5" sap:VirtualizedContainerService.HintSize="403.2,22.4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TryCatch_1" sap:VirtualizedContainerService.HintSize="418,1718" />
      <sap2010:ViewStateData Id="State_11" sap:VirtualizedContainerService.HintSize="135,94">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <av:Point x:Key="ShapeLocation">63,249.5</av:Point>
            <av:Size x:Key="ShapeSize">135,94</av:Size>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Double x:Key="StateContainerWidth">121</x:Double>
            <x:Double x:Key="StateContainerHeight">31</x:Double>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Transition_5" sap:VirtualizedContainerService.HintSize="430.4,809.6">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <av:PointCollection x:Key="ConnectorLocation">440.5,145.5 440.5,175.5 123.75,175.5 123.75,249.5</av:PointCollection>
            <x:Int32 x:Key="SrcConnectionPointIndex">39</x:Int32>
            <x:Int32 x:Key="DestConnectionPointIndex">34</x:Int32>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_3" sap:VirtualizedContainerService.HintSize="243.2,60.8" />
      <sap2010:ViewStateData Id="Assign_4" sap:VirtualizedContainerService.HintSize="313.6,60.8" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_8" sap:VirtualizedContainerService.HintSize="313.6,88" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_9" sap:VirtualizedContainerService.HintSize="313.6,88" />
      <sap2010:ViewStateData Id="Sequence_6" sap:VirtualizedContainerService.HintSize="336,441.6">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_1" sap:VirtualizedContainerService.HintSize="603.2,592" />
      <sap2010:ViewStateData Id="Sequence_3" sap:VirtualizedContainerService.HintSize="625.6,716.8">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="InvokeWorkflowFile_11" sap:VirtualizedContainerService.HintSize="696,88" />
      <sap2010:ViewStateData Id="Assign_33" sap:VirtualizedContainerService.HintSize="696,60.8" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_4" sap:VirtualizedContainerService.HintSize="313.6,88" />
      <sap2010:ViewStateData Id="InvokeMethod_1" sap:VirtualizedContainerService.HintSize="313.6,134.4" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_5" sap:VirtualizedContainerService.HintSize="313.6,88" />
      <sap2010:ViewStateData Id="Sequence_15" sap:VirtualizedContainerService.HintSize="336,515.2">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="InvokeMethod_2" sap:VirtualizedContainerService.HintSize="313.6,134.4" />
      <sap2010:ViewStateData Id="InvokeWorkflowFile_12" sap:VirtualizedContainerService.HintSize="313.6,88" />
      <sap2010:ViewStateData Id="Sequence_16" sap:VirtualizedContainerService.HintSize="336,387.2">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="If_5" sap:VirtualizedContainerService.HintSize="696,665.6">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Sequence_4" sap:VirtualizedContainerService.HintSize="718.4,1019.2">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_7" sap:VirtualizedContainerService.HintSize="243.2,60.8" />
      <sap2010:ViewStateData Id="Catch`1_3" sap:VirtualizedContainerService.HintSize="721.6,22.4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TryCatch_2" sap:VirtualizedContainerService.HintSize="736,1291.2" />
      <sap2010:ViewStateData Id="Transition_8" sap:VirtualizedContainerService.HintSize="430.4,513.6">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <av:PointCollection x:Key="ConnectorLocation">553,524.6 583,524.6 583,290 554,290</av:PointCollection>
            <x:Int32 x:Key="SrcConnectionPointIndex">44</x:Int32>
            <x:Int32 x:Key="DestConnectionPointIndex">36</x:Int32>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="LogMessage_6" sap:VirtualizedContainerService.HintSize="314,91" />
      <sap2010:ViewStateData Id="Transition_9" sap:VirtualizedContainerService.HintSize="430,505">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <av:PointCollection x:Key="ConnectorLocation">327,524.6 130.5,524.6 130.5,343.5</av:PointCollection>
            <x:Int32 x:Key="SrcConnectionPointIndex">45</x:Int32>
            <x:Int32 x:Key="DestConnectionPointIndex">39</x:Int32>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="State_9" sap:VirtualizedContainerService.HintSize="226,136">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <av:Point x:Key="ShapeLocation">327,443</av:Point>
            <av:Size x:Key="ShapeSize">226,136</av:Size>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Double x:Key="StateContainerWidth">212</x:Double>
            <x:Double x:Key="StateContainerHeight">58.400000000000091</x:Double>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Transition_6" sap:VirtualizedContainerService.HintSize="430.4,809.6">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <av:PointCollection x:Key="ConnectorLocation">440.5,337 440.5,367 440,367 440,443</av:PointCollection>
            <x:Int32 x:Key="SrcConnectionPointIndex">39</x:Int32>
            <x:Int32 x:Key="DestConnectionPointIndex">38</x:Int32>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Transition_7" sap:VirtualizedContainerService.HintSize="430.4,542.4">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            <av:PointCollection x:Key="ConnectorLocation">440.5,337 440.5,367 157.5,367 157.5,343.5</av:PointCollection>
            <x:Int32 x:Key="SrcConnectionPointIndex">39</x:Int32>
            <x:Int32 x:Key="DestConnectionPointIndex">55</x:Int32>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="State_8" sap:VirtualizedContainerService.HintSize="227,94">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <av:Point x:Key="ShapeLocation">327,243</av:Point>
            <av:Size x:Key="ShapeSize">227,94</av:Size>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Double x:Key="StateContainerWidth">213</x:Double>
            <x:Double x:Key="StateContainerHeight">31</x:Double>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="Assign_34" sap:VirtualizedContainerService.HintSize="243.2,60.8" />
      <sap2010:ViewStateData Id="Transition_3" sap:VirtualizedContainerService.HintSize="430.4,809.6">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <av:PointCollection x:Key="ConnectorLocation">440.5,145.5 440.5,243</av:PointCollection>
            <x:Int32 x:Key="SrcConnectionPointIndex">39</x:Int32>
            <x:Int32 x:Key="DestConnectionPointIndex">38</x:Int32>
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="State_1" sap:VirtualizedContainerService.HintSize="444,2149">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <av:Point x:Key="ShapeLocation">326.5,12.5</av:Point>
            <av:Size x:Key="ShapeSize">228,133</av:Size>
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
            <x:Double x:Key="StateContainerWidth">214</x:Double>
            <x:Double x:Key="StateContainerHeight">25</x:Double>
            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="StateMachine_1" sap:VirtualizedContainerService.HintSize="780,686">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
            <av:Point x:Key="ShapeLocation">100,42.4</av:Point>
            <x:Double x:Key="StateContainerWidth">766</x:Double>
            <x:Double x:Key="StateContainerHeight">650.00000000000011</x:Double>
            <av:PointCollection x:Key="ConnectorLocation">160,83.65 190,83.65 190,85.65 326.5,85.65</av:PointCollection>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </sap2010:ViewStateData>
      <sap2010:ViewStateData Id="TestFramework_1" sap:VirtualizedContainerService.HintSize="820,766" />
    </sap2010:ViewStateManager>
  </sap2010:WorkflowViewState.ViewStateManager>
</Activity>